// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/status/track_response.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ApiTrackResponse {
    // message fields
    athlete_id: ::std::option::Option<i32>,
    pub track_points: ::protobuf::RepeatedField<ApiTrackPoint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiTrackResponse {
    fn default() -> &'a ApiTrackResponse {
        <ApiTrackResponse as ::protobuf::Message>::default_instance()
    }
}

impl ApiTrackResponse {
    pub fn new() -> ApiTrackResponse {
        ::std::default::Default::default()
    }

    // required int32 athlete_id = 1;


    pub fn get_athlete_id(&self) -> i32 {
        self.athlete_id.unwrap_or(0)
    }
    pub fn clear_athlete_id(&mut self) {
        self.athlete_id = ::std::option::Option::None;
    }

    pub fn has_athlete_id(&self) -> bool {
        self.athlete_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_athlete_id(&mut self, v: i32) {
        self.athlete_id = ::std::option::Option::Some(v);
    }

    // repeated .track_response.ApiTrackPoint track_points = 2;


    pub fn get_track_points(&self) -> &[ApiTrackPoint] {
        &self.track_points
    }
    pub fn clear_track_points(&mut self) {
        self.track_points.clear();
    }

    // Param is passed by value, moved
    pub fn set_track_points(&mut self, v: ::protobuf::RepeatedField<ApiTrackPoint>) {
        self.track_points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_track_points(&mut self) -> &mut ::protobuf::RepeatedField<ApiTrackPoint> {
        &mut self.track_points
    }

    // Take field
    pub fn take_track_points(&mut self) -> ::protobuf::RepeatedField<ApiTrackPoint> {
        ::std::mem::replace(&mut self.track_points, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApiTrackResponse {
    fn is_initialized(&self) -> bool {
        if self.athlete_id.is_none() {
            return false;
        }
        for v in &self.track_points {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.athlete_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.track_points)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.athlete_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.track_points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.athlete_id {
            os.write_int32(1, v)?;
        }
        for v in &self.track_points {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiTrackResponse {
        ApiTrackResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "athlete_id",
                |m: &ApiTrackResponse| { &m.athlete_id },
                |m: &mut ApiTrackResponse| { &mut m.athlete_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApiTrackPoint>>(
                "track_points",
                |m: &ApiTrackResponse| { &m.track_points },
                |m: &mut ApiTrackResponse| { &mut m.track_points },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApiTrackResponse>(
                "ApiTrackResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApiTrackResponse {
        static instance: ::protobuf::rt::LazyV2<ApiTrackResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApiTrackResponse::new)
    }
}

impl ::protobuf::Clear for ApiTrackResponse {
    fn clear(&mut self) {
        self.athlete_id = ::std::option::Option::None;
        self.track_points.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiTrackResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiTrackResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApiTrackPoint {
    // message fields
    timestamp: ::std::option::Option<f64>,
    lat: ::std::option::Option<f32>,
    lng: ::std::option::Option<f32>,
    altitude: ::std::option::Option<f32>,
    altitude_agl: ::std::option::Option<f32>,
    status: ::protobuf::SingularField<::std::string::String>,
    speed: ::std::option::Option<f32>,
    vertical_speed: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiTrackPoint {
    fn default() -> &'a ApiTrackPoint {
        <ApiTrackPoint as ::protobuf::Message>::default_instance()
    }
}

impl ApiTrackPoint {
    pub fn new() -> ApiTrackPoint {
        ::std::default::Default::default()
    }

    // required double timestamp = 1;


    pub fn get_timestamp(&self) -> f64 {
        self.timestamp.unwrap_or(0.)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: f64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // required float lat = 2;


    pub fn get_lat(&self) -> f32 {
        self.lat.unwrap_or(0.)
    }
    pub fn clear_lat(&mut self) {
        self.lat = ::std::option::Option::None;
    }

    pub fn has_lat(&self) -> bool {
        self.lat.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lat(&mut self, v: f32) {
        self.lat = ::std::option::Option::Some(v);
    }

    // required float lng = 3;


    pub fn get_lng(&self) -> f32 {
        self.lng.unwrap_or(0.)
    }
    pub fn clear_lng(&mut self) {
        self.lng = ::std::option::Option::None;
    }

    pub fn has_lng(&self) -> bool {
        self.lng.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lng(&mut self, v: f32) {
        self.lng = ::std::option::Option::Some(v);
    }

    // required float altitude = 4;


    pub fn get_altitude(&self) -> f32 {
        self.altitude.unwrap_or(0.)
    }
    pub fn clear_altitude(&mut self) {
        self.altitude = ::std::option::Option::None;
    }

    pub fn has_altitude(&self) -> bool {
        self.altitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_altitude(&mut self, v: f32) {
        self.altitude = ::std::option::Option::Some(v);
    }

    // required float altitude_agl = 5;


    pub fn get_altitude_agl(&self) -> f32 {
        self.altitude_agl.unwrap_or(0.)
    }
    pub fn clear_altitude_agl(&mut self) {
        self.altitude_agl = ::std::option::Option::None;
    }

    pub fn has_altitude_agl(&self) -> bool {
        self.altitude_agl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_altitude_agl(&mut self, v: f32) {
        self.altitude_agl = ::std::option::Option::Some(v);
    }

    // optional string status = 6;


    pub fn get_status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required float speed = 7;


    pub fn get_speed(&self) -> f32 {
        self.speed.unwrap_or(0.)
    }
    pub fn clear_speed(&mut self) {
        self.speed = ::std::option::Option::None;
    }

    pub fn has_speed(&self) -> bool {
        self.speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f32) {
        self.speed = ::std::option::Option::Some(v);
    }

    // required float vertical_speed = 8;


    pub fn get_vertical_speed(&self) -> f32 {
        self.vertical_speed.unwrap_or(0.)
    }
    pub fn clear_vertical_speed(&mut self) {
        self.vertical_speed = ::std::option::Option::None;
    }

    pub fn has_vertical_speed(&self) -> bool {
        self.vertical_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vertical_speed(&mut self, v: f32) {
        self.vertical_speed = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for ApiTrackPoint {
    fn is_initialized(&self) -> bool {
        if self.timestamp.is_none() {
            return false;
        }
        if self.lat.is_none() {
            return false;
        }
        if self.lng.is_none() {
            return false;
        }
        if self.altitude.is_none() {
            return false;
        }
        if self.altitude_agl.is_none() {
            return false;
        }
        if self.speed.is_none() {
            return false;
        }
        if self.vertical_speed.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lat = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lng = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.altitude = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.altitude_agl = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.status)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speed = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.vertical_speed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp {
            my_size += 9;
        }
        if let Some(v) = self.lat {
            my_size += 5;
        }
        if let Some(v) = self.lng {
            my_size += 5;
        }
        if let Some(v) = self.altitude {
            my_size += 5;
        }
        if let Some(v) = self.altitude_agl {
            my_size += 5;
        }
        if let Some(ref v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.speed {
            my_size += 5;
        }
        if let Some(v) = self.vertical_speed {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timestamp {
            os.write_double(1, v)?;
        }
        if let Some(v) = self.lat {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.lng {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.altitude {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.altitude_agl {
            os.write_float(5, v)?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(v) = self.speed {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.vertical_speed {
            os.write_float(8, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiTrackPoint {
        ApiTrackPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "timestamp",
                |m: &ApiTrackPoint| { &m.timestamp },
                |m: &mut ApiTrackPoint| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lat",
                |m: &ApiTrackPoint| { &m.lat },
                |m: &mut ApiTrackPoint| { &mut m.lat },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lng",
                |m: &ApiTrackPoint| { &m.lng },
                |m: &mut ApiTrackPoint| { &mut m.lng },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "altitude",
                |m: &ApiTrackPoint| { &m.altitude },
                |m: &mut ApiTrackPoint| { &mut m.altitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "altitude_agl",
                |m: &ApiTrackPoint| { &m.altitude_agl },
                |m: &mut ApiTrackPoint| { &mut m.altitude_agl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &ApiTrackPoint| { &m.status },
                |m: &mut ApiTrackPoint| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "speed",
                |m: &ApiTrackPoint| { &m.speed },
                |m: &mut ApiTrackPoint| { &mut m.speed },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "vertical_speed",
                |m: &ApiTrackPoint| { &m.vertical_speed },
                |m: &mut ApiTrackPoint| { &mut m.vertical_speed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApiTrackPoint>(
                "ApiTrackPoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApiTrackPoint {
        static instance: ::protobuf::rt::LazyV2<ApiTrackPoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApiTrackPoint::new)
    }
}

impl ::protobuf::Clear for ApiTrackPoint {
    fn clear(&mut self) {
        self.timestamp = ::std::option::Option::None;
        self.lat = ::std::option::Option::None;
        self.lng = ::std::option::Option::None;
        self.altitude = ::std::option::Option::None;
        self.altitude_agl = ::std::option::Option::None;
        self.status.clear();
        self.speed = ::std::option::Option::None;
        self.vertical_speed = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiTrackPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiTrackPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fsrc/status/track_response.proto\x12\x0etrack_response\"s\n\x10ApiT\
    rackResponse\x12\x1d\n\nathlete_id\x18\x01\x20\x02(\x05R\tathleteId\x12@\
    \n\x0ctrack_points\x18\x02\x20\x03(\x0b2\x1d.track_response.ApiTrackPoin\
    tR\x0btrackPoints\"\xe5\x01\n\rApiTrackPoint\x12\x1c\n\ttimestamp\x18\
    \x01\x20\x02(\x01R\ttimestamp\x12\x10\n\x03lat\x18\x02\x20\x02(\x02R\x03\
    lat\x12\x10\n\x03lng\x18\x03\x20\x02(\x02R\x03lng\x12\x1a\n\x08altitude\
    \x18\x04\x20\x02(\x02R\x08altitude\x12!\n\x0caltitude_agl\x18\x05\x20\
    \x02(\x02R\x0baltitudeAgl\x12\x16\n\x06status\x18\x06\x20\x01(\tR\x06sta\
    tus\x12\x14\n\x05speed\x18\x07\x20\x02(\x02R\x05speed\x12%\n\x0evertical\
    _speed\x18\x08\x20\x02(\x02R\rverticalSpeed\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
